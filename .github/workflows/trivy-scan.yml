name: 🔍 Analyse de sécurité avec Trivy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  scan:
    name: 🔐 Scan Docker & K8s manifests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write  # ✅ nécessaire pour upload-sarif

    steps:
    - name: 📥 Cloner le dépôt
      uses: actions/checkout@v3

    - name: 🔧 Installer Trivy (via setup-trivy)
      uses: aquasecurity/setup-trivy@main
      with:
        version: latest

    - name: 🛠️ Build Docker image
      run: docker build -t flask-1:latest .

    - name: 🔐 Scanner l’image Docker avec Trivy (SARIF)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: image
        image-ref: flask-1:latest
        format: sarif
        output: trivy-docker-report.sarif
        exit-code: 1
        severity: HIGH,CRITICAL

    - name: 📤 Upload rapport Docker SARIF vers GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: trivy-docker-report.sarif

    - name: 📄 Afficher les vulnérabilités Docker dans les logs (table)
      run: |
        trivy image --severity HIGH,CRITICAL --format table flask-1:latest || true

    - name: 📁 Uploader le rapport Docker SARIF comme artefact
      uses: actions/upload-artifact@v4
      with:
        name: trivy-docker-sarif
        path: trivy-docker-report.sarif

    - name: 📄 Scanner les fichiers Kubernetes (SARIF)
      run: |
        trivy config --format sarif --output trivy-k8s-report.sarif --severity HIGH,CRITICAL ./manifests || true

    - name: 📤 Upload rapport K8s SARIF vers GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: trivy-k8s-report.sarif

    - name: 📁 Uploader le rapport K8s SARIF comme artefact
      uses: actions/upload-artifact@v4
      with:
        name: trivy-k8s-sarif
        path: trivy-k8s-report.sarif

